// Code generated by protoc-gen-go.
// source: schema.proto
// DO NOT EDIT!

package tipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MysqlType has the same constant value as MySQL.
type MysqlType int32

const (
	MysqlType_TypeUnspecified MysqlType = 0
	MysqlType_TypeTiny        MysqlType = 1
	MysqlType_TypeShort       MysqlType = 2
	MysqlType_TypeLong        MysqlType = 3
	MysqlType_TypeFloat       MysqlType = 4
	MysqlType_TypeDouble      MysqlType = 5
	MysqlType_TypeNull        MysqlType = 6
	MysqlType_TypeTimestamp   MysqlType = 7
	MysqlType_TypeLonglong    MysqlType = 8
	MysqlType_TypeInt24       MysqlType = 9
	MysqlType_TypeDate        MysqlType = 10
	MysqlType_TypeDuration    MysqlType = 11
	MysqlType_TypeDatetime    MysqlType = 12
	MysqlType_TypeYear        MysqlType = 13
	MysqlType_TypeNewDate     MysqlType = 14
	MysqlType_TypeVarchar     MysqlType = 15
	MysqlType_TypeBit         MysqlType = 16
	MysqlType_TypeNewDecimal  MysqlType = 246
	MysqlType_TypeEnum        MysqlType = 247
	MysqlType_TypeSet         MysqlType = 248
	MysqlType_TypeTinyBlob    MysqlType = 249
	MysqlType_TypeMediumBlob  MysqlType = 250
	MysqlType_TypeLongBlob    MysqlType = 251
	MysqlType_TypeBlob        MysqlType = 252
	MysqlType_TypeVarString   MysqlType = 253
	MysqlType_TypeString      MysqlType = 254
	MysqlType_TypeGeometry    MysqlType = 255
)

var MysqlType_name = map[int32]string{
	0:   "TypeUnspecified",
	1:   "TypeTiny",
	2:   "TypeShort",
	3:   "TypeLong",
	4:   "TypeFloat",
	5:   "TypeDouble",
	6:   "TypeNull",
	7:   "TypeTimestamp",
	8:   "TypeLonglong",
	9:   "TypeInt24",
	10:  "TypeDate",
	11:  "TypeDuration",
	12:  "TypeDatetime",
	13:  "TypeYear",
	14:  "TypeNewDate",
	15:  "TypeVarchar",
	16:  "TypeBit",
	246: "TypeNewDecimal",
	247: "TypeEnum",
	248: "TypeSet",
	249: "TypeTinyBlob",
	250: "TypeMediumBlob",
	251: "TypeLongBlob",
	252: "TypeBlob",
	253: "TypeVarString",
	254: "TypeString",
	255: "TypeGeometry",
}
var MysqlType_value = map[string]int32{
	"TypeUnspecified": 0,
	"TypeTiny":        1,
	"TypeShort":       2,
	"TypeLong":        3,
	"TypeFloat":       4,
	"TypeDouble":      5,
	"TypeNull":        6,
	"TypeTimestamp":   7,
	"TypeLonglong":    8,
	"TypeInt24":       9,
	"TypeDate":        10,
	"TypeDuration":    11,
	"TypeDatetime":    12,
	"TypeYear":        13,
	"TypeNewDate":     14,
	"TypeVarchar":     15,
	"TypeBit":         16,
	"TypeNewDecimal":  246,
	"TypeEnum":        247,
	"TypeSet":         248,
	"TypeTinyBlob":    249,
	"TypeMediumBlob":  250,
	"TypeLongBlob":    251,
	"TypeBlob":        252,
	"TypeVarString":   253,
	"TypeString":      254,
	"TypeGeometry":    255,
}

func (x MysqlType) Enum() *MysqlType {
	p := new(MysqlType)
	*p = x
	return p
}
func (x MysqlType) String() string {
	return proto.EnumName(MysqlType_name, int32(x))
}
func (x *MysqlType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MysqlType_value, data, "MysqlType")
	if err != nil {
		return err
	}
	*x = MysqlType(value)
	return nil
}
func (MysqlType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Collation has the same constant value as MySQL.
type Collation int32

const (
	Collation_latin1_swedish_ci  Collation = 8
	Collation_utf8_general_ci    Collation = 33
	Collation_utf8mb4_general_ci Collation = 45
	Collation_binary             Collation = 63
)

var Collation_name = map[int32]string{
	8:  "latin1_swedish_ci",
	33: "utf8_general_ci",
	45: "utf8mb4_general_ci",
	63: "binary",
}
var Collation_value = map[string]int32{
	"latin1_swedish_ci":  8,
	"utf8_general_ci":    33,
	"utf8mb4_general_ci": 45,
	"binary":             63,
}

func (x Collation) Enum() *Collation {
	p := new(Collation)
	*p = x
	return p
}
func (x Collation) String() string {
	return proto.EnumName(Collation_name, int32(x))
}
func (x *Collation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Collation_value, data, "Collation")
	if err != nil {
		return err
	}
	*x = Collation(value)
	return nil
}
func (Collation) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type TableInfo struct {
	TableId          *int64        `protobuf:"varint,1,opt,name=table_id" json:"table_id,omitempty"`
	Columns          []*ColumnInfo `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TableInfo) Reset()                    { *m = TableInfo{} }
func (m *TableInfo) String() string            { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()               {}
func (*TableInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TableInfo) GetTableId() int64 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *TableInfo) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ColumnInfo struct {
	ColumnId         *int64     `protobuf:"varint,1,opt,name=column_id" json:"column_id,omitempty"`
	Tp               *MysqlType `protobuf:"varint,2,opt,name=tp,enum=tipb.MysqlType" json:"tp,omitempty"`
	Collation        *Collation `protobuf:"varint,3,opt,name=collation,enum=tipb.Collation" json:"collation,omitempty"`
	ColumnLen        *int32     `protobuf:"varint,4,opt,name=columnLen" json:"columnLen,omitempty"`
	Decimal          *int32     `protobuf:"varint,5,opt,name=decimal" json:"decimal,omitempty"`
	PkHandle         *bool      `protobuf:"varint,6,opt,name=pk_handle" json:"pk_handle,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ColumnInfo) Reset()                    { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string            { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()               {}
func (*ColumnInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ColumnInfo) GetColumnId() int64 {
	if m != nil && m.ColumnId != nil {
		return *m.ColumnId
	}
	return 0
}

func (m *ColumnInfo) GetTp() MysqlType {
	if m != nil && m.Tp != nil {
		return *m.Tp
	}
	return MysqlType_TypeUnspecified
}

func (m *ColumnInfo) GetCollation() Collation {
	if m != nil && m.Collation != nil {
		return *m.Collation
	}
	return Collation_latin1_swedish_ci
}

func (m *ColumnInfo) GetColumnLen() int32 {
	if m != nil && m.ColumnLen != nil {
		return *m.ColumnLen
	}
	return 0
}

func (m *ColumnInfo) GetDecimal() int32 {
	if m != nil && m.Decimal != nil {
		return *m.Decimal
	}
	return 0
}

func (m *ColumnInfo) GetPkHandle() bool {
	if m != nil && m.PkHandle != nil {
		return *m.PkHandle
	}
	return false
}

type IndexInfo struct {
	TableId          *int64        `protobuf:"varint,1,opt,name=table_id" json:"table_id,omitempty"`
	IndexId          *int64        `protobuf:"varint,2,opt,name=index_id" json:"index_id,omitempty"`
	Columns          []*ColumnInfo `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Unique           *bool         `protobuf:"varint,4,opt,name=unique" json:"unique,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *IndexInfo) Reset()                    { *m = IndexInfo{} }
func (m *IndexInfo) String() string            { return proto.CompactTextString(m) }
func (*IndexInfo) ProtoMessage()               {}
func (*IndexInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *IndexInfo) GetTableId() int64 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *IndexInfo) GetIndexId() int64 {
	if m != nil && m.IndexId != nil {
		return *m.IndexId
	}
	return 0
}

func (m *IndexInfo) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexInfo) GetUnique() bool {
	if m != nil && m.Unique != nil {
		return *m.Unique
	}
	return false
}

func init() {
	proto.RegisterType((*TableInfo)(nil), "tipb.TableInfo")
	proto.RegisterType((*ColumnInfo)(nil), "tipb.ColumnInfo")
	proto.RegisterType((*IndexInfo)(nil), "tipb.IndexInfo")
	proto.RegisterEnum("tipb.MysqlType", MysqlType_name, MysqlType_value)
	proto.RegisterEnum("tipb.Collation", Collation_name, Collation_value)
}

var fileDescriptor2 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6a, 0x1b, 0x3d,
	0x14, 0xfd, 0xe4, 0x49, 0x6c, 0x8f, 0xfc, 0xa7, 0xe8, 0x23, 0x65, 0xa0, 0x9b, 0xc4, 0x8b, 0x62,
	0x02, 0x35, 0xd4, 0x64, 0xd1, 0x5d, 0x8b, 0xe3, 0xb6, 0x18, 0x92, 0x12, 0xb0, 0x5b, 0x28, 0x5d,
	0x18, 0xcd, 0x8c, 0x1c, 0x8b, 0x6a, 0xa4, 0xc9, 0x8c, 0x86, 0xd4, 0x4f, 0xd2, 0xc7, 0xea, 0xdb,
	0xf4, 0xff, 0xef, 0x4a, 0xae, 0xec, 0x50, 0xda, 0x95, 0x7d, 0x8f, 0xce, 0x3d, 0xf7, 0x9e, 0x23,
	0x0d, 0x6e, 0x97, 0xc9, 0x8a, 0x67, 0x6c, 0x98, 0x17, 0xda, 0x68, 0xba, 0x67, 0x44, 0x1e, 0xf7,
	0x1f, 0xe3, 0x70, 0xce, 0x62, 0xc9, 0xa7, 0x6a, 0xa9, 0x29, 0xc1, 0x4d, 0x63, 0x8b, 0x85, 0x48,
	0x23, 0x74, 0x84, 0x06, 0x01, 0x3d, 0xc6, 0x8d, 0x44, 0xcb, 0x2a, 0x53, 0x65, 0x54, 0x3b, 0x0a,
	0x06, 0xad, 0x11, 0x19, 0xda, 0xb6, 0xe1, 0x99, 0x03, 0x6d, 0x53, 0xff, 0x1d, 0xc2, 0x78, 0x57,
	0xd2, 0x03, 0x1c, 0x6e, 0x3a, 0x76, 0x22, 0x77, 0x71, 0xcd, 0xe4, 0xd0, 0x8f, 0x06, 0xdd, 0x51,
	0x6f, 0xd3, 0x7f, 0xb1, 0x2e, 0xaf, 0xe5, 0x7c, 0x9d, 0x73, 0xda, 0x77, 0x7c, 0xc9, 0x8c, 0xd0,
	0x2a, 0x0a, 0x6e, 0x73, 0xce, 0x3c, 0xbc, 0xd3, 0x3c, 0xe7, 0x2a, 0xda, 0x03, 0xce, 0x3e, 0xed,
	0xe1, 0x46, 0xca, 0x13, 0x91, 0x31, 0x19, 0xed, 0x3b, 0x00, 0x38, 0xf9, 0x9b, 0xc5, 0x8a, 0xa9,
	0x54, 0xf2, 0xa8, 0x0e, 0x50, 0xb3, 0x1f, 0xe3, 0x70, 0xaa, 0x52, 0xfe, 0xf6, 0x1f, 0xde, 0x00,
	0x11, 0xf6, 0xd8, 0x22, 0xb5, 0x3f, 0xdd, 0x06, 0x7f, 0x77, 0x4b, 0xbb, 0xb8, 0x5e, 0x29, 0x71,
	0x5d, 0x71, 0xb7, 0x47, 0xf3, 0xe4, 0x7d, 0x80, 0xc3, 0x9d, 0x99, 0xff, 0x71, 0xcf, 0xfe, 0xbe,
	0x50, 0x65, 0x0e, 0xcb, 0x2d, 0x05, 0x4f, 0xc9, 0x7f, 0xb4, 0x8d, 0x9b, 0x16, 0x9c, 0x0b, 0xb5,
	0x26, 0x88, 0x76, 0x20, 0x70, 0xa8, 0x66, 0x2b, 0x5d, 0x18, 0x52, 0xf3, 0x87, 0xe7, 0x5a, 0x5d,
	0x91, 0xc0, 0x1f, 0x3e, 0x95, 0x9a, 0x19, 0xb2, 0x07, 0xc3, 0xb0, 0x2d, 0x27, 0xba, 0x82, 0xc5,
	0xc9, 0xbe, 0x27, 0x3f, 0xaf, 0xa4, 0x24, 0x75, 0x70, 0xdc, 0xd9, 0xe8, 0x66, 0xbc, 0x34, 0x2c,
	0xcb, 0x49, 0x03, 0x2c, 0xb5, 0xbd, 0x9a, 0xb4, 0x8a, 0x4d, 0xaf, 0x38, 0x55, 0x66, 0x74, 0x4a,
	0x42, 0xaf, 0x30, 0x61, 0x86, 0x13, 0xec, 0xe9, 0x93, 0xaa, 0x70, 0x39, 0x93, 0xd6, 0x16, 0x81,
	0x73, 0x03, 0xba, 0xa4, 0xed, 0x3b, 0x5e, 0x71, 0x56, 0x90, 0x0e, 0xc4, 0xde, 0x72, 0x1b, 0xf0,
	0x1b, 0x27, 0xd1, 0xf5, 0xc0, 0x4b, 0x56, 0x24, 0x2b, 0x60, 0xf4, 0x68, 0x0b, 0x37, 0x2c, 0x30,
	0x16, 0x86, 0x10, 0xc8, 0xa3, 0xeb, 0xe9, 0x9b, 0xcb, 0x22, 0x1f, 0x6c, 0x02, 0x4e, 0xf1, 0x89,
	0xaa, 0x32, 0xf2, 0x11, 0xc1, 0x00, 0xd7, 0x30, 0xe3, 0x86, 0x7c, 0x42, 0x60, 0xaa, 0xed, 0xc3,
	0x1a, 0x4b, 0x1d, 0x93, 0xcf, 0xc8, 0x8b, 0x5c, 0xf0, 0x54, 0x54, 0x99, 0x03, 0xbf, 0x6c, 0x79,
	0xd6, 0xa9, 0x83, 0xbe, 0x6e, 0x75, 0x5d, 0xf9, 0x0d, 0x51, 0xba, 0x89, 0x07, 0x36, 0x9b, 0x99,
	0x42, 0x40, 0x18, 0xdf, 0x11, 0x6c, 0xeb, 0x02, 0xfd, 0x0d, 0xfc, 0xd8, 0xca, 0x3c, 0xe3, 0x3a,
	0xe3, 0xa6, 0x58, 0x93, 0x9f, 0xe8, 0xe4, 0x35, 0x0e, 0x77, 0x2f, 0xef, 0x10, 0x1f, 0xd8, 0x7f,
	0xea, 0xc1, 0xa2, 0xbc, 0x81, 0xf9, 0xe5, 0x6a, 0x91, 0x08, 0x48, 0x15, 0xee, 0xb9, 0x32, 0xcb,
	0x87, 0x8b, 0x2b, 0xae, 0x78, 0xc1, 0xa4, 0x05, 0x8f, 0xe9, 0x1d, 0x4c, 0x2d, 0x98, 0xc5, 0xa7,
	0xb7, 0xf1, 0xfb, 0x14, 0xe3, 0x7a, 0x2c, 0x14, 0x03, 0xf5, 0x47, 0xe3, 0x7b, 0xf8, 0x30, 0xd1,
	0xd9, 0x30, 0x87, 0xf1, 0x09, 0xcb, 0xe1, 0x75, 0xa5, 0xb1, 0x7b, 0x62, 0xe3, 0xd6, 0x8c, 0x4b,
	0x9e, 0x98, 0x4b, 0xfb, 0x69, 0x5e, 0xa2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x33, 0x03,
	0x13, 0xab, 0x03, 0x00, 0x00,
}
